the maximum GCD from 1 to n is always n/2 if n is odd then n-1/2.

find take 2 number for l up to r and find two x and y which its LCM is 
between l and r, for that if 2l > r it is no such LCM if not x=l and y=2l will do.

given x find LCD(x,y) + GCD(x,y) = x. The x=1 and y=n-1 will always do.

if u want an array which arr[i] + arr[j] != arr[a] and 1<i,j,a<size. so put 
1 in all index of array it will always do. 

int digits = (int)log10(num); this will give the number of digits in num variable
int first = num / pow(10, digits) this give the first digit
int last = num % 10 this gives the last digit

cout << (ans ? "YES" : "NO") << endl; if ans = true output YES otherwise NO

For fobinaci sequence 1+2+3+...+n
if n is odd n + (n*(n/2)
if n is even n + (n*(n/2) - (n/2)



want binary of an int 
just take a loop modules number by 2 store it in the array then divide number by 2 until num == 0
the array printed from last index till index 0 will be the binary number
	while(n > 0){
		int num = n % 2;
		arr.push_back(num);
		n = n/2;
	}
	for(int i= arr.size()-1; i>=0; i--){
		if(arr[i] == 1)cout<<i+1<<" ";
	}



is_sorted() this function checks the array that is it sorted or not
is_sorted(arr.begin(), arr.end());